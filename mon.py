#!/usr/bin/env python

# Copyright (C) 2016  Stefan Mandl

# Display debug messages from rephone
# Shows only vm_log* messages from the device.
# Only works with firmware version W15.19.p2

# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
# Street, Fifth Floor, Boston, MA 02110-1301 USA.

import serial
import time
import sys
import re
import argparse
import traceback
import os
import struct




class MTKModem(object):

	
	def __init__(self):
		
		print 'Switch on the device and connect it to the USB port'

	def open(self, port):
		
		print 'Try to open port %s. Press ctrl + c for break' % port
		while 1:
			try:
				self.ser = serial.Serial(port, 115200, timeout=5)
				self.ser.flushInput()
				self.ser.flushOutput()
				break
			except:
				time.sleep(0.2)
				continue
	
	def close(self):
		self.ser.close()
		
	
	def getBufferCrc(self, Buffer):
		
	 	crcsum = 0x0000
	 	for byte in Buffer:
	 		crcsum = (crcsum + ord(byte)) & 0x000000FF
	 	print('Checksum is 0x%x') % (crcsum)
		return crcsum
    
	    	
     
	# reveive a paket
    #   
    #   (Header)      (lenght)   (paket id) (data)   (checksum)
	#   55 00            45         71                         2
	

	def receivePaket(self):
   		
		data = bytearray()
		while 1:
			data = self.ser.read(1)
			if data == '\x55':
				data = self.ser.read(1)
				if data == '\x00':
						self.getmsgclean()
				
		
			elif data == '\xA5':
				self.getA5msg()
				
			elif data == '\x00':
				data = self.ser.read(1)
				if data == '\xFF':
					self.getFix12msg()
			else:
				
				print '%02x' % struct.unpack('B', data),
		
					

	# got a high priority messages
					
	def getA5msg(self):
		# print 'A5'
		length, = struct.unpack('B', self.ser.read(1))
		data = self.ser.read(length)	
		checksum = self.ser.read(1)
		checksum = self.ser.read(1)	
		
	def getFix12msg(self):
		
		#print 'Fix 12 msg',
		data = self.ser.read(12)
		#print data.encode("hex")
		
			
	def getmsgclean(self):
				
		msg = bytearray()
		# get msg length
		length, = struct.unpack('B', self.ser.read(1))
		i = 0
		while i < length:
			data = self.ser.read(1)
			if data == '\xA5':
				# got a high prio A5 msg
				self.getA5msg()
		
			else:
				msg += data
				i = i + 1
		
		id = msg[:1]
		# print id
		if id == '\x71':
			# debug msg
			debug_msg = msg[19:]
			debug_msg = debug_msg.strip(chr(0))
			debug_msg = debug_msg.strip('\x0a')
			
			print debug_msg
		
	
		# read checksum
		checksum = self.ser.read(1)
		checksum = self.ser.read(1)			

	#
	# connect to catcher in the device
	#
	def switchOn(self):
		
		print 'Send switchOn'

		step1 = '\x55\x00\x0c\x63\x30\x00\x08\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x08'

		step2 = '\x55\x00\x35\x63\x02\x00\x31\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x32'

		step3 = '\x55\x03\x06\x63\x04\x00\x02\x03\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36'

		step4 = '\x55\x00\x88\x63\x06\x00\x84\x00\x70\x00\x00\x56\x52\x45\x49\x4e\x49\x54\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17'

		step5 = '\x55\x00\x88\x63\x06\x00\x84\x00\x03\x00\x00\x50\x6f\x6c\x6c\x69\x6e\x67\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60'

		self.ser.write(step1)
		time.sleep(0.2)
		self.ser.write(step2)
		time.sleep(0.2)
		self.ser.write(step3)
		time.sleep(0.2)
		self.ser.write(step5)
		time.sleep(0.2)
		
	

	def flushCom(self):
		self.ser.flushInput()
		self.ser.flushOutput()


def main():


	parser = argparse.ArgumentParser(description='Mon Application Utility', prog='uploader')

	parser.add_argument('--port', '-p', help='Serial port device', default='/dev/ttyACM1')

	args = parser.parse_args()

	h = MTKModem()
	
	while 1:
		try:
			h.open(args.port);
			time.sleep(2)
			h.switchOn()
			h.receivePaket()
		except serial.SerialException as e:
			# Disconnect of USB->UART occured
			h.close()
			print 'USB disconnect'
		except OSError as e:
			h.close()
			print 'USB not ready. wait....'
			time.sleep(8)
        

	


if __name__ == '__main__':
    try:
        main()
       
    except Exception, err:
        sys.stderr.write('ERROR: %s\n' % str(err))
        traceback.print_exc()


